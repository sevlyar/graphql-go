// Code generated by gql-gen-resolver. DO NOT EDIT.
// source: testdata/schema.gql
package testdata

import (
	context "context"
	graphql "github.com/lygo/graphql-go"
)

// schema from source: testdata/schema.gql
const Schema string = `
schema {
    query: Query
    mutation: Mutation
}
# The query type, represents all of the entry points into our object graph
type Query {
    # Hero return main hero of episode
    hero(episode: Episode = NEWHOPE): Character @deprecated(reason: "Because I said so")
    reviews(episode: Episode): [Review]!
    search(text: String!): [SearchResult]!
    character(id: ID!): Character
    droid(id: ID!): Droid
    human(id: ID!): Human
    starship(id: ID!): Starship
}
# The mutation type, represents all updates we can make to our data
type Mutation {
    createReview(episode: Episode!, review: ReviewInput!): Review
}
# The episodes in the Star Wars trilogy
enum Episode {
    # Star Wars Episode IV: A New Hope, released in 1977.
    NEWHOPE
    # Star Wars Episode V: The Empire Strikes Back, released in 1980.
    EMPIRE
    # Star Wars Episode VI: Return of the Jedi, released in 1983.
    JEDI
}
# A character from the Star Wars universe
interface Character {
    # The ID of the character
    id: ID!
    # The name of the character
    name: String!
    # The friends of the character, or an empty list if they have none
    friends: [Character]
    # The friends of the character exposed as a connection with edges
    friendsConnection(first: Int, after: ID): FriendsConnection!
    # The movies this character appears in
    appearsIn: [Episode!]!
}
# Units of height
enum LengthUnit {
    # The standard unit around the world
    METER
    # Primarily used in the United States
    FOOT
}
# A humanoid creature from the Star Wars universe
type Human implements Character {
    # The ID of the human
    id: ID!
    # What this human calls themselves
    name: String!
    # Height in the preferred unit, default is meters
    height(unit: LengthUnit = METER): Float!
    # Mass in kilograms, or null if unknown
    mass: Float
    # This human's friends, or an empty list if they have none
    friends: [Character]
    # The friends of the human exposed as a connection with edges
    friendsConnection(first: Int, after: ID): FriendsConnection!
    # The movies this human appears in
    appearsIn: [Episode!]!
    # A list of starships this person has piloted, or an empty list if none
    starships: [Starship]
}
# An autonomous mechanical character in the Star Wars universe
type Droid implements Character {
    # The ID of the droid
    id: ID!
    # What others call this droid
    name: String!
    # This droid's friends, or an empty list if they have none
    friends: [Character]
    # The friends of the droid exposed as a connection with edges
    friendsConnection(first: Int, after: ID): FriendsConnection!
    # The movies this droid appears in
    appearsIn: [Episode!]!
    # This droid's primary function
    primaryFunction: String
}
# A connection object for a character's friends
type FriendsConnection {
    # The total number of friends @lazy
    totalCount: Int!
    # The edges for each of the character's friends.
    edges: [FriendsEdge]
    # A list of the friends, as a convenience when edges are not needed.
    friends: [Character]
    # Information for paginating this connection
    pageInfo: PageInfo!
}
# An edge object for a character's friends
type FriendsEdge {
    # A cursor used for pagination
    cursor: ID!
    # The character represented by this friendship edge
    node: Character
}
# Information for paginating this connection
type PageInfo {
    startCursor: ID
    endCursor: ID
    hasNextPage: Boolean!
}
# Represents a review for a movie
type Review {
    # The number of stars this review gave, 1-5
    stars: Int!
    # Comment about the movie
    commentary: String
}
# The input object sent when someone is creating a new review
input ReviewInput {
    # 0-5 stars
    stars: Int!
    # Comment about the movie, optional
    commentary: String
}
type Starship {
    # The ID of the starship
    id: ID!
    # The name of the starship
    name: String!
    # Length of the starship, along the longest axis
    length(unit: LengthUnit = METER): Float!
}
union SearchResult = Human | Droid | Starship
`

type SchemaResolver interface {
	QueryResolver
	MutationResolver
}

type CharacterArguments struct {
	ID graphql.ID
}

type CreateReviewArguments struct {
	Episode Episode
	Review  ReviewInput
}

type DroidArguments struct {
	ID graphql.ID
}

type FriendsConnectionArguments struct {
	First *int32
	After *graphql.ID
}

type HeightArguments struct {
	// default value "METER"
	Unit LengthUnit
}

type HeroArguments struct {
	// default value "NEWHOPE"
	Episode Episode
}

type HumanArguments struct {
	ID graphql.ID
}

type LengthArguments struct {
	// default value "METER"
	Unit LengthUnit
}

type ReviewsArguments struct {
	Episode *Episode
}

type SearchArguments struct {
	Text string
}

type StarshipArguments struct {
	ID graphql.ID
}

// A character from the Star Wars universe
type Character interface {
	// The ID of the character
	ID() graphql.ID
	// The name of the character
	Name() string
	// The friends of the character, or an empty list if they have none
	Friends(ctx context.Context) (*[]*CharacterResolver, error)
	// The friends of the character exposed as a connection with edges
	FriendsConnection(ctx context.Context, in FriendsConnectionArguments) (FriendsConnectionResolver, error)
	// The movies this character appears in
	AppearsIn(ctx context.Context) ([]Episode, error)
}

type CharacterResolver struct {
	Character
}

func (i *CharacterResolver) ToHuman() (HumanResolver, bool) {
	c, ok := i.Character.(HumanResolver)
	return c, ok
}

func (i *CharacterResolver) ToDroid() (DroidResolver, bool) {
	c, ok := i.Character.(DroidResolver)
	return c, ok
}

// An autonomous mechanical character in the Star Wars universe
type DroidResolver interface {
	// The ID of the droid
	ID() graphql.ID
	// What others call this droid
	Name() string
	// This droid's friends, or an empty list if they have none
	Friends(ctx context.Context) (*[]*CharacterResolver, error)
	// The friends of the droid exposed as a connection with edges
	FriendsConnection(ctx context.Context, in FriendsConnectionArguments) (FriendsConnectionResolver, error)
	// The movies this droid appears in
	AppearsIn(ctx context.Context) ([]Episode, error)
	// This droid's primary function
	PrimaryFunction() *string
}

// The episodes in the Star Wars trilogy
type Episode = string

const (
	// Star Wars Episode IV: A New Hope, released in 1977.
	Episode_NEWHOPE = `NEWHOPE`
	// Star Wars Episode V: The Empire Strikes Back, released in 1980.
	Episode_EMPIRE = `EMPIRE`
	// Star Wars Episode VI: Return of the Jedi, released in 1983.
	Episode_JEDI = `JEDI`
)

// A connection object for a character's friends
type FriendsConnectionResolver interface {
	// The total number of friends @lazy
	TotalCount(ctx context.Context) (int32, error)
	// The edges for each of the character's friends.
	Edges(ctx context.Context) (*[]FriendsEdgeResolver, error)
	// A list of the friends, as a convenience when edges are not needed.
	Friends(ctx context.Context) (*[]*CharacterResolver, error)
	// Information for paginating this connection
	PageInfo(ctx context.Context) (PageInfoResolver, error)
}

// An edge object for a character's friends
type FriendsEdgeResolver interface {
	// A cursor used for pagination
	Cursor() graphql.ID
	// The character represented by this friendship edge
	Node(ctx context.Context) (*CharacterResolver, error)
}

// A humanoid creature from the Star Wars universe
type HumanResolver interface {
	// The ID of the human
	ID() graphql.ID
	// What this human calls themselves
	Name() string
	// Height in the preferred unit, default is meters
	Height(in HeightArguments) float64
	// Mass in kilograms, or null if unknown
	Mass() *float64
	// This human's friends, or an empty list if they have none
	Friends(ctx context.Context) (*[]*CharacterResolver, error)
	// The friends of the human exposed as a connection with edges
	FriendsConnection(ctx context.Context, in FriendsConnectionArguments) (FriendsConnectionResolver, error)
	// The movies this human appears in
	AppearsIn(ctx context.Context) ([]Episode, error)
	// A list of starships this person has piloted, or an empty list if none
	Starships(ctx context.Context) (*[]StarshipResolver, error)
}

// Units of height
type LengthUnit = string

const (
	// The standard unit around the world
	LengthUnit_METER = `METER`
	// Primarily used in the United States
	LengthUnit_FOOT = `FOOT`
)

// The mutation type, represents all updates we can make to our data
type MutationResolver interface {
	CreateReview(ctx context.Context, in CreateReviewArguments) (ReviewResolver, error)
}

// Information for paginating this connection
type PageInfoResolver interface {
	StartCursor() *graphql.ID
	EndCursor() *graphql.ID
	HasNextPage() bool
}

// The query type, represents all of the entry points into our object graph
type QueryResolver interface {
	// Hero return main hero of episode
	// Deprecated: Because I said so
	Hero(ctx context.Context, in HeroArguments) (*CharacterResolver, error)
	Reviews(ctx context.Context, in ReviewsArguments) ([]ReviewResolver, error)
	Search(ctx context.Context, in SearchArguments) ([]*SearchResultResolver, error)
	Character(ctx context.Context, in CharacterArguments) (*CharacterResolver, error)
	Droid(ctx context.Context, in DroidArguments) (DroidResolver, error)
	Human(ctx context.Context, in HumanArguments) (HumanResolver, error)
	Starship(ctx context.Context, in StarshipArguments) (StarshipResolver, error)
}

// Represents a review for a movie
type ReviewResolver interface {
	// The number of stars this review gave, 1-5
	Stars() int32
	// Comment about the movie
	Commentary() *string
}

// The input object sent when someone is creating a new review
type ReviewInput struct {
	// 0-5 stars
	Stars int32
	// Comment about the movie, optional
	Commentary *string
}

type SearchResultResolver struct {
	Result interface{}
}

func (i *SearchResultResolver) ToHuman() (HumanResolver, bool) {
	c, ok := i.Result.(HumanResolver)
	return c, ok
}

func (i *SearchResultResolver) ToDroid() (DroidResolver, bool) {
	c, ok := i.Result.(DroidResolver)
	return c, ok
}

func (i *SearchResultResolver) ToStarship() (StarshipResolver, bool) {
	c, ok := i.Result.(StarshipResolver)
	return c, ok
}

type StarshipResolver interface {
	// The ID of the starship
	ID() graphql.ID
	// The name of the starship
	Name() string
	// Length of the starship, along the longest axis
	Length(in LengthArguments) float64
}
